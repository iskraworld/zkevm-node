syntax = "proto3";

package aggregator.v1;

option go_package = "github.com/0xPolygonHermez/zkevm-node/aggregator_v2/pb";

message Version {
    string v0_0_1 = 1;
}

// timestamps are represented in unix time in seconds

/**
 * Define all methods implementes by the gRPC
 * Channel: prover receives aggregator messages and returns prover messages with the same id
 */
service AggregatorService {
    rpc Channel(stream ProverMessage) returns (stream AggregatorMessage) {}
}

message AggregatorMessage
{
    enum Type {
        UNSPECIFIED = 0;
        GET_STATUS_REQUEST = 1;
        GEN_PROOF_REQUEST = 2;
        GEN_BATCH_PROOF_REQUEST = 3;
        GEN_AGGREGATED_PROOF_REQUEST = 4;
        GEN_FINAL_PROOF_REQUEST = 5;
        CANCEL_REQUEST = 6;
        GET_PROOF_REQUEST = 7;
    }
    Type type = 1;
    string id = 2;
    oneof request {
        GetStatusRequest get_status_request = 3;
        GenProofRequest gen_proof_request = 4;
        GenBatchProofRequest gen_batch_proof_request = 5;
        GenAggregatedProofRequest gen_aggregated_proof_request = 6;
        GenFinalProofRequest gen_final_proof_request = 7;
        CancelRequest cancel_request = 8;
        GetProofRequest get_proof_request = 9;
    }
}

message ProverMessage
{
    enum Type {
        UNSPECIFIED = 0;
        GET_STATUS_RESPONSE = 1;
        GEN_PROOF_RESPONSE = 2;
        GEN_BATCH_PROOF_RESPONSE = 3;
        GEN_AGGREGATED_PROOF_RESPONSE = 4;
        GEN_FINAL_PROOF_RESPONSE = 5;
        CANCEL_RESPONSE = 6;
        GET_PROOF_RESPONSE = 7;
    }
    Type type = 1;
    string id = 2;
    oneof response {
        GetStatusResponse get_status_response = 3;
        GenProofResponse gen_proof_response = 4;
        GenBatchProofResponse gen_batch_proof_response = 5;
        GenAggregatedProofResponse gen_aggregated_proof_response = 6;
        GenFinalProofResponse gen_final_proof_response = 7;
        CancelResponse cancel_response = 8;
        GetProofResponse get_proof_response = 9;
    }
}

///////////////////
// Request messages
///////////////////

/**
 * @dev GetStatusRequest
 */
message GetStatusRequest {}

/**
 * @dev GenProofRequest
 * @param {input} - input prover
 */
message GenProofRequest {
    InputProver input = 1;
}

/**
 * @dev GenBatchProofRequest
 * @param {input} - input prover
 */
message GenBatchProofRequest {
    InputProver input = 1;
}

/**
 * @dev GenAggregatedProofRequest
 * @param {input_1} - input 1 json, proof of the first batch to aggregate
 * @param {input_2} - input 2 json, proof of the second batch to aggregate
 */
message GenAggregatedProofRequest {
    string input_1 = 1;
    string input_2 = 2;
}

/**
 * @dev GenFinalProofRequest
 * @param {input} - input json, proof of the batch or aggregated proof to finalise
 */
message GenFinalProofRequest {
    string input = 1;
}

/**
 * @dev CancelRequest
 * @param {id} - identifier of the proof request to cancel
 */
 message CancelRequest {
    string id = 1;
}

/**
 * @dev Request GetProof
 * @param {id} - proof identifier of the proof request
 * @param {timeout} - time to wait until the service responds
 */
message GetProofRequest {
    string id = 1;
    uint64 timeout = 2;
}

/////////////////////
// Responses messages
/////////////////////

/**
 * @dev Response GetStatus
 * @param {status} - server status
 * - BOOTING: being ready to compute proofs
 * - COMPUTING: busy computing a proof
 * - IDLE: waiting for a proof to compute
 * - HALT: stop
 * @param {last_computed_request_id} - last proof identifier that has been computed
 * @param {last_computed_end_time} - last proof timestamp when it was finished
 * @param {current_computing_request_id} - id of the proof that is being computed
 * @param {current_computing_start_time} - timestamp when the proof that is being computed started
 * @param {version_proto} - .proto verion
 * @param {version_server} - server version
 * @param {pending_request_queue_ids} - list of identifierss of proof requests that are in the pending queue
 * @param {prover_id} - id of this prover instance; it changes if prover reboots
 * @param {number_of_cores} - number of cores in the system where the prover is running
 * @param {total_memory} - total memory in the system where the prover is running
 * @param {free_memory} - free memory in the system where the prover is running
 */
message GetStatusResponse {
    enum Status {
        UNSPECIFIED = 0;
        BOOTING = 1;
        COMPUTING = 2;
        IDLE = 3;
        HALT = 4;
    }
    Status status = 1;
    string last_computed_request_id = 2;
    uint64 last_computed_end_time = 3;
    string current_computing_request_id = 4;
    uint64 current_computing_start_time = 5;
    string version_proto = 6;
    string version_server = 7;
    repeated string pending_request_queue_ids = 8;
    string prover_id = 9;
    uint64 number_of_cores = 10;
    uint64 total_memory = 11;
    uint64 free_memory = 12;
}

/**
 * @dev Result
 *  - OK: succesfully completed
 *  - ERROR: request is not correct, i.e. input data is wrong
 *  - INTERNAL_ERROR: internal server error when delivering the response
 */
enum Result {
    UNSPECIFIED = 0;
    OK = 1;
    ERROR = 2;
    INTERNAL_ERROR = 3;
}

/**
 * @dev GenProofRespone
 * @param {id} - proof identifier, to be used in GetProofRequest()
 * @param {result} - request result
 */
message GenProofResponse {
    string id = 1;
    Result result = 2;
}

/**
 * @dev GenBatchProofResponse
 * @param {id} - proof identifier, to be used in GetProofRequest()
 * @param {result} - request result
 */
message GenBatchProofResponse {
    string id = 1;
    Result result = 2;
}

/**
 * @dev GenAggregatedProofResponse
 * @param {id} - proof identifier, to be used in GetProofRequest()
 * @param {result} - request result
 */
message GenAggregatedProofResponse {
    string id = 1;
    Result result = 2;
}

/**
 * @dev Response GenFinalProof
 * @param {id} - proof identifier, to be used in GetProofRequest()
 * @param {result} - request result
 */
message GenFinalProofResponse {
    string id = 1;
    Result result = 2;
}

/**
 * @dev CancelResponse
 * @param {result} - request result
 */
message CancelResponse {
    Result result = 1;
}

/**
 * @dev GetProofResponse
 * @param {id} - proof identifier
 * @param {proof} - groth16 proof
 * @param {public} - public circuit inputs
 * @param {result} - proof result
 *  - COMPLETED_OK: proof has been computed successfully and it is valid
 *  - ERROR: request error
 *  - COMPLETED_ERROR: proof has been computed successfully and it is not valid
 *  - PENDING: proof is being computed
 *  - INTERNAL_ERROR: server error during proof computation
 *  - CANCEL: proof has been cancelled
 * @param {result_string} - extends result information
 * @param {output} - output json
 */
message GetProofResponse {
    enum Result {
        UNSPECIFIED = 0;
        COMPLETED_OK = 1;
        ERROR = 2;
        COMPLETED_ERROR = 3;
        PENDING = 4;
        INTERNAL_ERROR = 5;
        CANCEL = 6;
    }
    string id = 1;
    Proof proof = 2;
    PublicInputsExtended public = 3;
    Result result = 4;
    string result_string = 5;
    string output = 6;
}

/*
 * @dev PublicInputs
 * @param {old_state_root}
 * @param {old_local_exit_root}
 * @param {new_state_root}
 * @param {new_local_exit_root}
 * @param {sequencer_addr}
 * @param {batch_hash_data}
 * @param {batch_num}
 * @param {eth_timestamp}
 */
message PublicInputs {
    string old_state_root = 1;
    string old_local_exit_root = 2;
    string new_state_root = 3;
    string new_local_exit_root = 4;
    string sequencer_addr = 5;
    string batch_hash_data = 6;
    uint32 batch_num = 7;
    uint64 eth_timestamp = 8;
    string aggregator_addr = 9;
    uint64 chain_id = 10;
}

/**
 * @dev ProofB
 * @param {proofs} - two elliptic curves points
 */
message ProofB {
    repeated string proofs = 1;
}

/**
 * @dev Proof
 * @param {proof_a} - elliptic curve point
 * @param {proof_b} - two elliptic curves points
 * @param {proof_c} - elliptic curve point
 */
message Proof {
    repeated string proof_a = 1;
    repeated ProofB proof_b = 2;
    repeated string proof_c = 3;
}

/**
 * @dev InputProver
 * @param {public_inputs} - public inputs
 * @param {global_exit_root} - bridge global exit root
 * @param {batch_l2_data} - contract calldata
 * @param {address_aggregator} - ethereum address aggregator
 * @param {db} - database containing all key-values in smt matching the old state root
 * @param {contracts_bytecode} - key is the hash(contractBytecode), value is the bytecode itself
 */
message InputProver {
    PublicInputs public_inputs = 1;
    string global_exit_root = 2;
    string batch_l2_data = 3;
    map<string, string> db = 4; // For debug/testing purpposes only. Don't fill this on production
    map<string, string> contracts_bytecode = 5; // For debug/testing purpposes only. Don't fill this on production
}

/**
 * @dev PublicInputsExtended
 * @param {public_inputs} - public inputs
 * @param {input_hash} - global hash of all public inputs. Used as a sanity check.
 */
message PublicInputsExtended {
    PublicInputs public_inputs = 1;
    string input_hash = 2;
}
